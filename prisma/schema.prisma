generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstName String
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userProducts Product[]    @relation("Owner")
  cart           Cart[]
}

model Product {
  id              Int     @id @default(autoincrement())
  title           String
  description     String    @db.Text
  isAvailable     Boolean   @default(true)
  isForSale       Boolean   @default(true)
  isForRent       Boolean   @default(true)
  slug            String    @unique
  quantity Int
  userId          String    
  owner           User      @relation("Owner", fields: [userId], references: [id])
  averageRating   Int   @default(0)
  categories      ProductCategory[]
  saleDetails     ProductSaleDetails?
  rentDetails     ProductRentDetails?
  cartItems       CartItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  // orderItems      OrderItemDetails[]
  // ratings         Rating[]
  // wishlistItems   WishlistItem[]
  // transactions    Transaction[]
}
model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    ProductCategory[]
}

model ProductCategory {
  productId   Int
  categoryId  Int
  product     Product   @relation(fields: [productId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}


model ProductSaleDetails {
  id         Int    @id @default(autoincrement())
  productId  Int    @unique
  price      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  product    Product   @relation(fields: [productId], references: [id])
}

model ProductRentDetails {
  id                 Int    @id @default(autoincrement())
  productId         Int    @unique
  price             Int
  availablePeriods  String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  product           Product   @relation(fields: [productId], references: [id])
}

model Cart {
  id         Int    @id @default(autoincrement())
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  items      CartItem[]
}

model CartItem {
  id         Int    @id @default(autoincrement())
  cartId     Int
  productId  Int
  type       String
  rentalPeriod Int?
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  cart       Cart      @relation(fields: [cartId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}