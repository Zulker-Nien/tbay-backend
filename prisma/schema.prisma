generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstName String
  lastName  String?
  userProducts Product[]    @relation("Owner")
  cart           Cart[]
  orders         Order[]
  boughtProducts OrderItemDetails[] @relation("Buyer")
  soldProducts   OrderItemDetails[] @relation("Seller")
  rentedProducts OrderItemDetails[] @relation("Renter")
  lendedProducts   OrderItemDetails[] @relation("Lender")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              Int     @id @default(autoincrement())
  title           String
  description     String    @db.Text
  available       Availability @default(BOTH)
  slug            String    @unique
  quantity Int
  userId          String    
  owner           User      @relation("Owner", fields: [userId], references: [id])
  averageRating   Int   @default(0)
  categories      ProductCategory[]
  saleDetails     ProductSaleDetails?
  rentDetails     ProductRentDetails?
  cartItems       CartItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orderItems      OrderItemDetails[]
  // ratings         Rating[]
  // wishlistItems   WishlistItem[]
}

enum Availability {
  SALE
  RENT
  BOTH
  OUTOFSTOCK
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    ProductCategory[]
}

model ProductCategory {
  productId   Int
  categoryId  Int
  product     Product   @relation(fields: [productId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model ProductSaleDetails {
  id         Int    @id @default(autoincrement())
  productId  Int    @unique
  price      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  product    Product   @relation(fields: [productId], references: [id])
}

model ProductRentDetails {
  id                 Int    @id @default(autoincrement())
  productId         Int    @unique
  price       Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  product           Product   @relation(fields: [productId], references: [id])
}

model Cart {
  id         Int    @id @default(autoincrement())
  userId     String
  totalPrice Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  items      CartItem[]
}

model CartItem {
  id         Int    @id @default(autoincrement())
  cartId     Int
  productId  Int
  price      Int
  quantity   Int
  itemType   ItemType
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  cart       Cart      @relation(fields: [cartId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}

enum ItemType {
  BUY
  RENT
}

model Order {
  id            Int   @id @default(autoincrement())
  userId        String
  totalAmount   Int
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  items         OrderItemDetails[]
}

model OrderItemDetails {
  id         Int   @id @default(autoincrement())
  orderId    Int
  productId  Int
  buyerId       String
  sellerId      String
  renterId       String
  lenderId      String
  price      Int
  orderType  ItemType
  quantity   Int
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  order      Order     @relation(fields: [orderId], references: [id])
  buyer         User      @relation("Buyer", fields: [buyerId], references: [id])
  seller        User      @relation("Seller", fields: [sellerId], references: [id])
  renter         User      @relation("Renter", fields: [renterId], references: [id])
  lender        User      @relation("Lender", fields: [lenderId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}